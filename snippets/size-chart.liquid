<div class="size-chart-container">
  <div class="initial-text">
    <div class="initial">
      All our sizes are tailored keeping in view Indian women body types. Every fit and finish has been meticulously
      designed with best fabric in mind.
    </div>
  </div>

  <div class="toggle-container">
    {{ inchesMode | jso }}
    <button
      class="unit-button inches-button{% if inchesMode %} active{% endif %}"
      onclick="updateSizeValues(event, true)"
    >
      INCHES
    </button>
    <button
      class="unit-button centimeters-button{% unless inchesMode %} active{% endunless %}"
      onclick="updateSizeValues(event, false)"
    >
      CM
    </button>
  </div>

  <div class="size-chart-wrapper">
    {% assign sizeChartData = product.metafields.custom.size_chart.value %}
    {% for sizechartheading in sizeChartData %}
      <div
        class="tab--heading{% if forloop.first %} is--active{% endif %}"
        data-tab="{{ sizechartheading.id | handleize }}"
      >
        {% assign words = sizechartheading.id | split: '_' %}
        {% for word in words %}
          {% capture capitalizedWord %}{{ word | capitalize }}{% endcapture %}
          {{ capitalizedWord -}}
          {%- unless forloop.last %} {% endunless %}
        {% endfor %}
      </div>
    {% endfor %}
  </div>

  {% assign sizeChartData = product.metafields.custom.size_chart.value %}
  {% for chart in sizeChartData %}
    <div
      id="{{ chart.id | handleize }}"
      class="tab-content container-content{% if forloop.first %} active_content{% endif %}"
    >
      <div class="sizechart-tab-contents">
        <div class="tab-content-description">
          <table>
            {% assign sizeinfo = chart.sizeChartInfo %}
            <tr class="size-chart-card">
              <td class="size-values">Size</td>
              {% for item in sizeinfo %}
                <td class="size-values">{{ item.size }}</td>
              {% endfor %}
            </tr>
            {% assign sizes = 'BUST,WAIST,HIP,FRONT LENGTH' | split: ',' %}

            {% for size in sizes %}
              {% assign isEmpty = true %}
              {% for item in sizeinfo %}
                {% if item.info[size] != blank %}
                  {% assign isEmpty = false %}
                {% endif %}
              {% endfor %}
              {% unless isEmpty %}
                <tr class="{{ size | downcase }}-size-values">
                  <td>{{ size }}</td>
                  {% for item in sizeinfo %}
                    <td data-original-value="{{  item.info[size] }}">{{ item.info[size] }}</td>
                  {% endfor %}
                </tr>
              {% endunless %}
            {% endfor %}
          </table>
        </div>
        <div class="sizeChart-text">
          <div class="sub-text">
            *Depending on your body type and dressing habits, the above sizes are for reference only.
          </div>
        </div>

        {% case product.type %}
          {% when 'Top' %}
            {% assign prefix = 'TOP' %}
          {% when 'Bottom' %}
            {% assign prefix = 'BOTTOM' %}
          {% when 'Dress' %}
            {% assign prefix = 'DRESS' %}
          {% when 'Skirt' %}
            {% assign prefix = 'SKIRT' %}
        {% endcase %}

        {% if chart.id == 'body_measurement' %}
          {% assign mobileImage = 'BODY_MEASUREMENT_-_' | append: prefix | append: '.png' %}
          {% assign desktopImage = 'desktop_BODY_MEASUREMENT_-_' | append: prefix | append: '.png' %}
        {% elsif chart.id == 'garment_measurement' %}
          {% assign mobileImage = 'GARMENT_MEASUREMENT_-_' | append: prefix | append: '.png' %}
          {% assign desktopImage = 'desktop_GARMENT_MEASUREMENT_-_' | append: prefix | append: '.png' %}
        {% endif %}

        <script>
          var inchesMode = true;

          var inchesButton = document.getElementsByClassName('unit-button inches-button');
          var centimetersButton = document.getElementsByClassName('unit-button centimeters-button');

          var inchesButtonArr = Array.from(inchesButton);
          var centimetersButtonArr = Array.from(centimetersButton);

          function classAdditionRemoval(add) {
            if (add) {
              inchesButtonArr.forEach((elem) => {
                elem.classList.add('active');
              });
              centimetersButtonArr.forEach((elem) => {
                elem.classList.remove('active');
              });
            } else {
              centimetersButtonArr.forEach((elem) => {
                elem.classList.add('active');
              });
              inchesButtonArr.forEach((elem) => {
                elem.classList.remove('active');
              });
            }
          }

          function centimetersClass() {}

          function updateSizeValues(event, toInches) {
            event.preventDefault();

            inchesMode = toInches;

            var sizeValues = document.querySelectorAll('.size-chart-container td[data-original-value]');
            console.log(sizeValues);
            sizeValues.forEach(function (sizeValue) {
              var originalValue = parseFloat(sizeValue.getAttribute('data-original-value'));

              if (!isNaN(originalValue)) {
                sizeValue.textContent = convertUnits(originalValue, inchesMode);
              }
            });

            if (inchesMode) {
              classAdditionRemoval(true);
            } else {
              classAdditionRemoval(false);
            }
          }

          function convertUnits(value, toInches) {
            return toInches ? value : Math.round(value * 2.54);
          }

          //Set inches on First load

          classAdditionRemoval(true);

          {% comment %} var inchesButton = document.querySelector('.unit-button.inches-button');
          var centimetersButton = document.querySelector('.unit-button.centimeters-button');
          inchesButton.classList.add('active');
          centimetersButton.classList.remove('active'); {% endcomment %}

          var screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
          var imageSrc =
            screenWidth < 769
              ? '{{ mobileImage | file_img_url:"master" }}'
              : '{{ desktopImage | file_img_url:"master" }}';
          document.write('<img src="' + imageSrc + '" alt="{{ image.alt }}">');
        </script>
      </div>
    </div>
  {% endfor %}
</div>

<style>
  .inches-button.active,
  .centimeters-button.active {
    background-color: #111;
    color: white;
  }

  .size-chart-header {
    width: 100%;
    position: absolute;
    top: 0;
    background-color: #fff;
    padding: 1.5rem;
    z-index: 0;
  }

  .toggle-container {
    display: flex;
    width: 160px;
    margin: 20px auto 0;
  }
  .head {
    font-family: Inter;
    font-size: 14px;
    font-style: normal;
    font-weight: 600;
    line-height: 22px;
    text-align: left;
  }
  @media (min-width: 769px) {
    .head {
      font-family: Inter;
      font-size: 20px;
      font-style: normal;
      font-weight: 700;
      line-height: 28px;
      text-align: left;
    }
  }

  .sub-text {
    color: #aaa;
    font-size: 12px;
    line-height: 18px;
    letter-spacing: 0.24px;
    margin-top: 8px;
    word-wrap: break-word;
    white-space: normal;
  }

  .initial {
    font-size: 12px;
    margin-top: 25px;
    line-height: 18px;
    letter-spacing: 0.24px;
  }

  .unit-button {
    flex: 1;
    padding: 10px;
    font-size: 14px;
    cursor: pointer;
    border: 1px solid black;
    outline: none;
    background-color: #fff;
    transition: background-color 0.4s;
  }

  .inches-button.active {
    background-color: #111;
    color: white;
  }

  .centimeters-button.active {
    background-color: #111;
    color: white;
  }

  input:checked + .slider {
    background-color: #111;
  }

  input:focus + .slider {
    box-shadow: 0 0 1px #111;
  }

  input:checked + .slider:before {
    -webkit-transform: translateX(26px);
    -ms-transform: translateX(26px);
    transform: translateX(26px);
  }

  .slider.round {
    border-radius: 34px;
  }

  .slider.round:before {
    border-radius: 50%;
  }

  table {
    border-collapse: collapse;
    width: 100%;
  }

  td,
  th {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
  }

  th {
    background-color: #fff;
  }

  .size-chart-card {
    background-color: #fff;
    font-weight: bold;
  }

  .sub-text {
    background-color: #fff;
  }
  @media (max-width: 768px) {
    .size-chart-container tr:not(.size-chart-card):not(.sub-text):nth-child(even) {
      background-color: #fff;
    }
  }
</style>
